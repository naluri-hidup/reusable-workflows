name: Workflow update ECS task definition
# Git path
# Deployment yaml path
on:
  workflow_call:
    secrets:
      STAG_GH_ACTIONS_ACCESS_KEY_ID:
        required: true
      STAG_GH_ACTIONS_SECRET_ACCESS_KEY:
        required: true
      PROD_GH_ACTIONS_ACCESS_KEY_ID:
        required: false
      PROD_GH_ACTIONS_SECRET_ACCESS_KEY:
        required: false
      SLACK_DEPLOYMENT_WEBHOOK:
        required: true
      MASTER_GH_ACTIONS_ACCESS_KEY_ID:
        required: true
      MASTER_GH_ACTIONS_SECRET_ACCESS_KEY:
        required: true
    inputs:
      deploy_env:
        required: true
        type: string
      ecr_name:
        required: true
        type: string
      git_sha_short:
        required: true
        type: string
      git_branch:
        required: true
        type: string
      reusable_tag:
        required: true
        type: string
      aws_account:
        required: false
        type: string
        default: 'stag'
      aws_region:
        required: false
        type: string
        default: 'ap-southeast-1'
      standalone_ecs_task:
        required: false
        type: boolean
        default: false
      source_path:
        required: false
        type: string
        default: ''
      git_sha_short_ecr:
        required: true
        type: string

jobs:
  ecs-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: main
          ref: ${{ inputs.git_branch }}
          fetch-depth: 0
      
      - name: Checkout reusable
        uses: actions/checkout@v3
        with:
          repository: naluri-hidup/reusable-workflows
          path: template
          fetch-depth: 0
          ref: ${{ inputs.reusable_tag }}

      - name: Git Pull
        run: |
          cd main && git pull origin ${{ inputs.git_branch }} && cd ..
          cd template && git pull origin ${{ inputs.reusable_tag }} && cd ..
          
      - name: Configure AWS Credentials
        env:
          GH_ACTIONS_ACCESS_KEY_ID: ${{ inputs.aws_account }}_GH_ACTIONS_ACCESS_KEY_ID
          GH_ACTIONS_SECRET_ACCESS_KEY: ${{ inputs.aws_account }}_GH_ACTIONS_SECRET_ACCESS_KEY
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          aws-access-key-id: ${{ secrets[env.GH_ACTIONS_ACCESS_KEY_ID] }}
          aws-secret-access-key: ${{ secrets[env.GH_ACTIONS_SECRET_ACCESS_KEY] }}
          aws-region: ${{ inputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Generate Task Definition
        id: generate
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run : |
          pip install pathlib
          pip install ruamel.yaml
          pip install envyaml

          export env="${{ inputs.deploy_env }}"
          export source_path="main/${{ inputs.source_path }}deployment/definition.yml"

          ## Make the definition into Environment variables
          set -a;
          eval $(python3 -c 'from pathlib import Path; from ruamel.yaml import YAML; import os; print("".join([f"{k}={v}\n" for k, v in YAML().load(Path(os.environ["source_path"]))[os.environ["env"]]["ecs"].items()]))');
          set a+;

          ## For Setting default value
          if [[ -z ${task_role_name} ]]; then
            export task_role_name='""'
          fi

          if [[ -z ${build_version} ]]; then
            export build_version="${{ inputs.git_sha_short }}"
          fi
          
          if [[ -z ${container_name} ]]; then
            export container_name=$task_definition_name
          fi
          
          ## For Ecs Update
          echo "task_definition_name=$task_definition_name" >> $GITHUB_OUTPUT
          echo "cluster_name=$cluster_name" >> $GITHUB_OUTPUT
          echo "service_name=$service_name" >> $GITHUB_OUTPUT

          ## Generate Task definition
          if [[ -z ${task_definition_template} ]]; then
            echo "use_ecs_template=false" >> $GITHUB_OUTPUT
          else
            echo "use_ecs_template=true" >> $GITHUB_OUTPUT
            filepath="template/ecs-td-template/${task_definition_template}.yml"
            python3 template/scripts/ecs/env-yaml.py -t $filepath -o task-definition.yml
            python3 template/scripts/ecs/insert-yaml.py -e $env -s $source_path -d task-definition.yml -o task-definition.yml
            cat task-definition.yml
          fi

      - name: ECS deployment
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          VERSION=v4.2.0
          BINARY=yq_linux_amd64
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - | tar xz && sudo mv ${BINARY} /usr/bin/yq

          final_path=actual-task-definition.json

          ## To json
          if [[ ${{ steps.generate.outputs.use_ecs_template }} == true ]]; then
            yq e -j task-definition.yml > task-definition.json
            filepath=task-definition.json
          else
            filepath=main/deployment/${{ inputs.deploy_env }}/task-definition.json
          fi

          ## Image hash/tag
          image_name="$ECR_REGISTRY/${{ inputs.ecr_name }}:${{ inputs.git_sha_short_ecr }}"
          cat $filepath | jq '.containerDefinitions[0].image='\"${image_name}\" > $final_path

          ## Add TD
          aws ecs register-task-definition --family ${{ steps.generate.outputs.task_definition_name }} --region="ap-southeast-1" --cli-input-json file://$final_path

          ## Update service
          TASK_REVISION=`aws ecs describe-task-definition --task-definition ${{ steps.generate.outputs.task_definition_name }} | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/,//'`

          if [[ ${{ inputs.standalone_ecs_task }} == false ]]; then
            aws ecs update-service --cluster ${{ steps.generate.outputs.cluster_name }} --service ${{ steps.generate.outputs.service_name }} --task-definition ${{ steps.generate.outputs.task_definition_name }}:$TASK_REVISION
          else
            aws ecs run-task --cluster ${{ steps.generate.outputs.cluster_name }} --task-definition ${{ steps.generate.outputs.task_definition_name }}:$TASK_REVISION
          fi
          
      - name: Slack Notification
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":":sparkles: [ *${{ github.repository }}* ] ${{ inputs.git_branch }} source code branch to ${{ inputs.deploy_env }} environment deployed by *@${{ github.actor }}*: `done`"}' ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK }}
