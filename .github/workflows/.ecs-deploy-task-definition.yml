name: Workflow update ECS task definition
# Git path
# Deployment yaml path
on:
  workflow_call:
    secrets:
      STAG_GH_ACTIONS_ACCESS_KEY_ID:
        required: true
      STAG_GH_ACTIONS_SECRET_ACCESS_KEY:
        required: true
      PROD_GH_ACTIONS_ACCESS_KEY_ID:
        required: false
      PROD_GH_ACTIONS_SECRET_ACCESS_KEY:
        required: false
      SLACK_DEPLOYMENT_WEBHOOK:
        required: true
      MASTER_GH_ACTIONS_ACCESS_KEY_ID:
        required: true
      MASTER_GH_ACTIONS_SECRET_ACCESS_KEY:
        required: true
    inputs:
      deploy_env:
        required: true
        type: string
      ecr_name:
        required: true
        type: string
      git_sha_short:
        required: true
        type: string
      git_branch:
        required: true
        type: string
      reusable_tag:
        required: true
        type: string
      aws_account:
        required: false
        type: string
        default: "stag"
      aws_region:
        required: false
        type: string
        default: "ap-southeast-1"
      standalone_ecs_task:
        required: false
        type: boolean
        default: false
      source_path:
        required: false
        type: string
        default: ""
      git_sha_short_ecr:
        required: true
        type: string

jobs:
  ecs-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: main
          ref: ${{ inputs.git_branch }}
          fetch-depth: 0

      - name: Checkout reusable
        uses: actions/checkout@v4
        with:
          repository: naluri-hidup/reusable-workflows
          path: template
          fetch-depth: 0
          ref: ${{ inputs.reusable_tag }}

      - name: Git Pull
        run: |
          cd main && git pull origin ${{ inputs.git_branch }} && cd ..
          cd template && git pull origin ${{ inputs.reusable_tag }} && cd ..

      - name: Configure AWS Credentials
        env:
          GH_ACTIONS_ACCESS_KEY_ID: ${{ inputs.aws_account }}_GH_ACTIONS_ACCESS_KEY_ID
          GH_ACTIONS_SECRET_ACCESS_KEY: ${{ inputs.aws_account }}_GH_ACTIONS_SECRET_ACCESS_KEY
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-access-key-id: ${{ secrets[env.GH_ACTIONS_ACCESS_KEY_ID] }}
          aws-secret-access-key: ${{ secrets[env.GH_ACTIONS_SECRET_ACCESS_KEY] }}
          aws-region: ${{ inputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate Task Definition
        id: generate
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          set -e  

          export env="${{ inputs.deploy_env }}"
          export source_path="main/${{ inputs.source_path }}deployment/definition.yml"
          export build_version="${{ inputs.git_sha_short }}"

          pip3 install -r template/scripts/ecs/requirements.txt

          ## Generate Task definition
          echo "use_ecs_template=true" >> $GITHUB_OUTPUT
          python3 template/scripts/ecs/render-template.py -v $source_path -o task-definition.yml
          cat task-definition.yml

      - name: Install yq - portable yaml processor
        uses: mikefarah/yq@v4

      - name: ECS deployment
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          final_path=actual-task-definition.json

          yq e -j task-definition.yml > task-definition.json
          filepath=task-definition.json

          ## Image hash/tag
          image_name="$ECR_REGISTRY/${{ inputs.ecr_name }}:${{ inputs.git_sha_short_ecr }}"
          cat $filepath | jq '.containerDefinitions[0].image='\"${image_name}\" > $final_path

          ## Add TD
          aws ecs register-task-definition --family ${{ steps.generate.outputs.task_definition_name }} --region="ap-southeast-1" --cli-input-json file://$final_path

          ## Update service
          TASK_REVISION=`aws ecs describe-task-definition --task-definition ${{ steps.generate.outputs.task_definition_name }} | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/,//'`

          if [[ ${{ inputs.standalone_ecs_task }} == false ]]; then
            aws ecs update-service --cluster ${{ steps.generate.outputs.cluster_name }} --service ${{ steps.generate.outputs.service_name }} --task-definition ${{ steps.generate.outputs.task_definition_name }}:$TASK_REVISION
          else
            aws ecs run-task --cluster ${{ steps.generate.outputs.cluster_name }} --task-definition ${{ steps.generate.outputs.task_definition_name }}:$TASK_REVISION
          fi

      - name: Slack Notification
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":":sparkles: [ *${{ github.repository }}* ] ${{ inputs.git_branch }} source code branch to ${{ inputs.deploy_env }} environment deployed by *@${{ github.actor }}*: `done`"}' ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK }}
