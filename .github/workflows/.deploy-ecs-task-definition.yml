name: Workflow update ECS task definition

on:
  workflow_call:
    secrets:
      GH_ACTIONS_ACCESS_KEY_ID:
        required: true
      GH_ACTIONS_SECRET_ACCESS_KEY:
        required: true
      GH_ACTIONS_REGION:
        required: true
    inputs:
      deploy_env:
        required: true
        type: string
      ecr_image:
        required: true
        type: string
jobs:
  ecs-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: main
      
      - name: Checkout reusable
        uses: actions/checkout@v3
        with:
          repository: naluri-hidup/reusable-workflows
          path: template

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GH_ACTIONS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GH_ACTIONS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.GH_ACTIONS_REGION }}
      
      - name: Generate Task Definition
        id: generate
        run : |
          pip install pathlib
          pip install ruamel.yaml
          pip install envyaml

          export env="${{ inputs.deploy_env }}"
          export image_name="${{ inputs.ecr_image }}"

          ## Make the definition into Environment variables
          set -a;
          eval $(python3 -c 'from pathlib import Path; from ruamel.yaml import YAML; import os; print("".join([f"{k}={v}\n" for k, v in YAML().load(Path("main/deployment/definition.yml"))[os.environ["env"]]["ecs"].items()]))');
          set a+;

          ## For Setting default value
          if [[ -z ${task_role_name} ]]; then
            export task_role_name='""'
          fi

          ## For Ecs Update
          echo "::set-output name=task_definition_name::$task_definition_name"
          echo "::set-output name=cluster_name::$cluster_name"
          echo "::set-output name=service_name::$service_name"

          ## Generate Task definition
          if [[ -z ${task_definition_template} ]]; then
            echo "::set-output name=use_ecs_template::false"
          else
            echo "::set-output name=use_ecs_template::true"
            python3 template/scripts/env-yaml.py -t ${task_definition_template}
          fi

      - name: ECS deployment
        run: |
          VERSION=v4.2.0
          BINARY=yq_linux_amd64
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - | tar xz && sudo mv ${BINARY} /usr/bin/yq

          if [[ ${{ steps.generate.outputs.use_ecs_template }} == true ]]; then
            yq e -j task-definition.yml > task-definition.json
            path=task-definition.json
          else
            path=main/${{ inputs.deploy_env }}/task-definition.json
          fi
          cat task-definition.json
          
          cat $path | jq '.containerDefinitions[0].image='\"${{ inputs.ecr_image }}\" > $path

          # aws ecs register-task-definition --family ${{ steps.generate.outputs.task_definition_name }} --region="ap-southeast-1" --cli-input-json file://$(pwd)"/"$path

          TASK_REVISION=`aws ecs describe-task-definition --task-definition ${{ steps.generate.outputs.task_definition_name }} | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/,//'`
          # aws ecs update-service --cluster ${{ steps.generate.outputs.cluster_name }} --service ${{ steps.generate.outputs.service_name }} --task-definition ${{ steps.generate.outputs.task_definition_name }}:$TASK_REVISION
