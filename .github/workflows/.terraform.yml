name: Workflow for terraform

on:
  workflow_call:
    secrets:
      TERRAFORM_ACCESS_KEY_ID:
        required: true
      TERRAFORM_SECRET_ACCESS_KEY:
        required: true
      TERRAFORM_REGION:
        required: true
      SLACK_DEPLOYMENT_WEBHOOK:
        required: true
      CLOUDFLARE_API_TOKEN:
        required: true
    inputs:
      component:
        required: true
        type: string
      config_path:
        required: true
        type: string
      git_branch:
        required: true
        type: string
      reusable_tag:
        required: true
        type: string
      apply:
        required: false
        type: boolean
        default: false
      destroy:
        required: false
        type: boolean
        default: false

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_branch }}
          fetch-depth: 0

      - name: Checkout reusable
        uses: actions/checkout@v4
        with:
          repository: naluri-hidup/reusable-workflows
          path: template
          fetch-depth: 0
          ref: ${{ inputs.reusable_tag }}

      - name: Git Pull
        run : |
          git pull origin ${{ inputs.git_branch }}
          cd template && git pull origin ${{ inputs.reusable_tag }} && cd ..

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3.0.1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.TERRAFORM_REGION }}
      
      - name: Get Module & Config
        id: terraform-config
        run: |
          config_path=${{ inputs.config_path }}
          module_path=$(dirname "$config_path")

          module_path=(`echo $module_path | tr "/" " "`)

          cp template/scripts/terraform/Makefile $module_path
          ls -la $module_path

          module_name=(`echo $module_path | tr "_" "-"`)
          module_name="${{ inputs.component }}-$module_name"

          c=$(basename "$config_path")
          config_name=(`echo $c | tr "." " "`)

          echo "module_path=$(echo $module_path)" >> $GITHUB_OUTPUT
          echo "module_name=$(echo $module_name)" >> $GITHUB_OUTPUT
          echo "config_name=$(echo $config_name)" >> $GITHUB_OUTPUT

          echo $module_path
          echo $module_name
          echo $config_name

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Terraform Init
        run: cd ${{ steps.terraform-config.outputs.module_path }} && make TERRAFORM_MODULE=${{ steps.terraform-config.outputs.module_name }} CONFIG_NAME=${{ steps.terraform-config.outputs.config_name }} terraform.init

      - name: Terraform Plan
        run: cd ${{ steps.terraform-config.outputs.module_path }} && make TERRAFORM_MODULE=${{ steps.terraform-config.outputs.module_name }} CONFIG_NAME=${{ steps.terraform-config.outputs.config_name }} DESTROY=${{ inputs.destroy }} terraform.plan

      - name: Terrraform Apply
        if: ${{ inputs.apply }}
        run: cd ${{ steps.terraform-config.outputs.module_path }} && make TERRAFORM_MODULE=${{ steps.terraform-config.outputs.module_name }} CONFIG_NAME=${{ steps.terraform-config.outputs.config_name }} DESTROY=${{ inputs.destroy }} terraform.apply

      - name: Slack Notification Terraform Plan
        if: ${{ inputs.apply == false }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":":sparkles: [ *${{ github.repository }}* ] ${{ inputs.git_branch }} source code branch, config: ${{ inputs.config_path }} plan by *@${{ github.actor }}*: `done`"}' ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK }}

      - name: Slack Notification Terraform Apply
        if: ${{ inputs.apply }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":":sparkles: [ *${{ github.repository }}* ] ${{ inputs.git_branch }} source code branch, config: ${{ inputs.config_path }} apply by *@${{ github.actor }}*: `done`"}' ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK }}

      