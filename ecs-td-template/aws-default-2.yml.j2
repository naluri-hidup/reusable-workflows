task-definition:
  family: {{ ecs.task_definition_name }}
  {%- if ecs.execution_role_name is defined %}
  executionRoleArn: "{{ ecs.execution_role_name }}"
  {%- endif %}
  {%- if ecs.task_role_name is defined %}
  taskRoleArn: "{{ ecs.task_role_name }}"
  {%- endif %}
  volumes: []
  placementConstraints: []
  networkMode: {{ ecs.networkMode | default('bridge') }}
  requiresCompatibilities:
    - EC2
  containerDefinitions:
    - name: {{ ecs.task_definition_name }}
      image: dummy
      cpu: {{ ecs.cpu }}
      memory: {{ ecs.memory }}
      {%- if ecs.gpu is defined %}
      resourceRequirements:
        - type: GPU
          value: {{ ecs.gpu }}
      {%- endif %}
      portMappings:
      {%- for portMapping in portMappings %}
        - containerPort: {{ portMapping.containerPort }}
          hostPort: {{ portMapping.hostPort }}
          protocol: {{ portMapping.protocol | default('tcp') }}
          {% if portMapping.appProtocol is defined %}
          appProtocol: {{ portMapping.appProtocol }}
          {% endif %}
      {%- endfor %}
      essential: true
      {%- if environment is defined %}
      environment:
      {%- for env in environment | default([]) %}
        - name: {{ env.name }}
          value: "{{ env.value | string }}"
      {%- endfor %}
      {%- endif %}
      {%- if mountPoints is defined %}
      mountPoints:
      {%- for mountPoint in mountPoints | default([]) %}
        - sourceVolume: {{ mountPoint.sourceVolume }}
          containerPath: {{ mountPoint.containerPath }}
          readOnly: {{ mountPoint.readOnly | default(false) }}
      {%- endfor %}
      {%- endif %}
      {%- if volumesFrom is defined %}
      volumesFrom:
      {%- for volumeFrom in volumesFrom | default([]) %}
        - sourceContainer: {{ volumeFrom.sourceContainer }}
          readOnly: {{ volumeFrom.readOnly | default(false) }}
      {%- endfor %}
      {%- endif %}
      {%- if secrets is defined %}
      secrets:
      {%- for secret in secrets | default([]) %}
        - name: {{ secret.name }}
          valueFrom: "{{ secret.valueFrom }}"
      {%- endfor %}
      {%- endif %}
      {%- if command is defined %}
      command:
      {%- for cmd in command | default([]) %}
        - {{ cmd }}
      {%- endfor %}
      {%- endif %}
      {%- if linuxParameters is defined %}
      linuxParameters:
        capabilities:
          add:
          {%- for cap in linuxParameters.capabilities.add | default([]) %}
            - {{ cap }}
          {%- endfor %}
          drop:
          {%- for cap in linuxParameters.capabilities.drop | default([]) %}
            - {{ cap }}
          {%- endfor %}
        devices:
        {%- for device in linuxParameters.devices | default([]) %}
          - hostPath: {{ device.hostPath }}
            containerPath: {{ device.containerPath }}
            permissions:
              - {{ device.permissions | default('') }}
        {%- endfor %}
        initProcessEnabled: {{ linuxParameters.initProcessEnabled | default(false) }}
        maxSwap: {{ linuxParameters.maxSwap | default(0) }}
        sharedMemorySize: {{ linuxParameters.sharedMemorySize | default(0) }}
        swappiness: {{ linuxParameters.swappiness | default(0) }}
        tmpfs:
        {%- for tmpfs in linuxParameters.tmpfs | default([]) %}
          - containerPath: {{ tmpfs.containerPath }}
            size: {{ tmpfs.size | default(0) }}
            mountOptions:
            {%- for option in tmpfs.mountOptions | default([]) %}
              - {{ option }}
            {%- endfor %}
        {%- endfor %}
      {%- endif %}
      {%- if ulimits is defined %}
      ulimits:
      {%- for ulimit in ulimits | default([]) %}
        - name: {{ ulimit.name }}
          softLimit: {{ ulimit.softLimit }}
          hardLimit: {{ ulimit.hardLimit }}
      {%- endfor %}
      {%- endif %}
      dockerLabels:
        com.datadoghq.tags.env: {{ env }}
        com.datadoghq.tags.service: {{ ecs.task_definition_name | default('') }}
        com.datadoghq.tags.version: {{ build_version | default('latest') }}
      logConfiguration:
        secretOptions: []
        logDriver: awslogs
        options:
          awslogs-group: /ecs/{{ ecs.task_definition_name | default('default_task_definition_name') }}
          awslogs-region: ap-southeast-1
          awslogs-stream-prefix: {{ ecs.task_definition_name | default('default_task_definition_name') }}-log-stream
